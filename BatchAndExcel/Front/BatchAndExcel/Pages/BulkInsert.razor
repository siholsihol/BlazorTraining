@page "/bulkinsert"
@implements R_IProcessProgressStatus

<R_GroupBox Title="Batch Process">
    <R_Button OnClick="@OnClickHandler">Process</R_Button>
    <R_ProgressBar Label="@_message" MaxValue="100" Value="@_percentage"></R_ProgressBar>
</R_GroupBox>

@code {
    public List<EmployeeDTO> EmployeeList { get; set; } = new();
    private string _message = "";
    private int _percentage = 0;

    protected override void OnInitialized()
    {
        var loEx = new R_Exception();

        try
        {
            var loFake = new Faker<EmployeeDTO>()
               .CustomInstantiator(x => new EmployeeDTO())
               .RuleFor(x => x.FirstName, x => x.Name.FirstName())
               .RuleFor(x => x.Gender, x => x.PickRandom(new[] { "M", "F" }))
               .RuleFor(x => x.Id, x => Guid.NewGuid().ToString());
            EmployeeList = loFake.Generate(100);
        }
        catch (Exception ex)
        {
            Console.WriteLine(R_FrontUtility.Dump(ex));
        }
    }

    public async Task OnClickHandler()
    {
        var loEx = new R_Exception();
        R_BatchParameter loBatchPar;
        R_ProcessAndUploadClient loCls;
        string lcGuid = "";

        try
        {
            //Instantiate ProcessClient
            loCls = new R_ProcessAndUploadClient(
                plSendWithContext: false,
                plSendWithToken: false,
                poProcessProgressStatus: this);

            //preapare Batch Parameter
            loBatchPar = new R_BatchParameter();
            loBatchPar.COMPANY_ID = "RCD";
            loBatchPar.USER_ID = "cp";
            loBatchPar.ClassName = "BatchAndExcelBack.BulkInsertCls";
            loBatchPar.BigObject = EmployeeList;
            lcGuid = await loCls.R_BatchProcess<List<EmployeeDTO>>(loBatchPar, EmployeeList.Count);

        }
        catch (Exception ex)
        {
            Console.WriteLine(R_FrontUtility.Dump(ex));
        }
    }

    #region Status
    async Task R_IProcessProgressStatus.ProcessComplete(string pcKeyGuid, eProcessResultMode poProcessResultMode)
    {
        if (poProcessResultMode == eProcessResultMode.Success)
        {
            _message = string.Format("Process Complete and success with GUID {0}", pcKeyGuid);
        }

        if (poProcessResultMode == eProcessResultMode.Fail)
        {
            _message = string.Format("Process Complete but fail with GUID {0}", pcKeyGuid);
        }

        StateHasChanged();

        await Task.CompletedTask;
    }

    async Task R_IProcessProgressStatus.ProcessError(string pcKeyGuid, R_APIException ex)
    {
        _message = string.Format("Process Error with GUID {0}", pcKeyGuid);

        StateHasChanged();

        await Task.CompletedTask;
    }

    async Task R_IProcessProgressStatus.ReportProgress(int lnProgress, string lcStatus)
    {
        _message = string.Format("Process Progress {0} with status {1}", lnProgress, lcStatus);

        //_percentage = lnProgress.ToString() + "%";
        _percentage = lnProgress;
        _message = string.Format("Process Progress {0} with status {1}", lnProgress, lcStatus);

        StateHasChanged();

        await Task.CompletedTask;
    }
    #endregion
}
