@page "/excelbatchprocess"
@using R_BlazorFrontEnd;
@using R_BlazorFrontEnd.Controls;
@using R_BlazorFrontEnd.Controls.Grid.Columns
@implements R_IProcessProgressStatus

<R_GroupBox Title="Excel">
    @*<R_Grid @ref="@GridRef" DataSource="@GridList"
                R_GridType="@R_eGridType.Batch"
                AllowAddNewRow="true"
                AllowEditRow="true"
                AllowDeleteRow="true" R_ServiceGetListRecord="@R_ServiceGetListRecord">
            <R_GridColumns>
                <R_GridTextColumn FieldName="@nameof(EmployeeDTO.Id)"
                                  HeaderText="User Id" />

                <R_GridTextColumn FieldName="@nameof(EmployeeDTO.FirstName)"
                                  HeaderText="First Name"
                                  R_EnableAdd
                                  R_EnableEdit />

                <R_GridDropDownListColumn Data="@GenderList"
                                          ValueField="@nameof(GenderDTO.Id)"
                                          TextField="@nameof(GenderDTO.Description)"
                                          FieldName="@nameof(EmployeeDTO.Gender)"
                                          HeaderText="Gender"
                                          R_EnableAdd
                                          R_EnableEdit />
            </R_GridColumns>
        </R_Grid>*@
    <R_InputFile OnChange="@OnChangeHandler" Accepts="@accepts" MaxFileSize="@_maximumFileSize"></R_InputFile>
    <R_Button OnClick="@OnClickHandler">Process</R_Button>
</R_GroupBox>

@code {
    [Inject] private R_IExcel ExcelProvider { get; set; }

    private R_eFileSelectAccept[] accepts = { R_eFileSelectAccept.Excel };
    private long _maximumFileSize = 5 * 1024 * 1024;
    private List<EmployeeBatchProcessDTO> _resultEmployeeExcel = new();
    private string _message = "";
    private int _percentage = 0;

    private async Task OnChangeHandler(InputFileChangeEventArgs eventArgs)
    {
        var loEx = new R_Exception();

        try
        {
            //read excel as byte
            var loMS = new MemoryStream();
            await eventArgs.File.OpenReadStream(maxAllowedSize: _maximumFileSize).CopyToAsync(loMS);
            var loByteFile = loMS.ToArray();

            //import from excel
            System.Data.DataSet loDataSet = ExcelProvider.R_ReadFromExcel(loByteFile);

            _resultEmployeeExcel = R_FrontUtility.R_ConvertTo<EmployeeBatchProcessDTO>(loDataSet.Tables[0]).ToList();

            //await GridRef.R_RefreshGrid(resultEmployee);

            //Console.WriteLine(R_FrontUtility.Dump(resultEmployee));
            //Console.WriteLine(R_FrontUtility.Dump(resultGender));

            //export to excel
            //loByteFile = ExcelProvider.R_WriteToExcel(loDataSet);
            //var saveFileName = $"{Guid.NewGuid().ToString()}.xlsx";

            //await JS.downloadFileFromStreamHandler(saveFileName, loByteFile);
        }
        catch (Exception ex)
        {
            Console.WriteLine(R_FrontUtility.Dump(ex));
        }
    }

    private async Task OnClickHandler()
    {
        try
        {
            //    var loEmployeList = new List<EmployeeDTO>()
            //{
            //    new EmployeeDTO() {Id = Guid.NewGuid().ToString(), FirstName="Sihol", Gender=1},
            //    new EmployeeDTO() {Id = Guid.NewGuid().ToString(), FirstName="Siholwati", Gender=2}
            //};

            //    var loDataTable = R_FrontUtility.R_ConvertTo(loEmployeList);
            //    loDataTable.TableName = "Employee";

            //    //export to excel
            //    var loByteFile = ExcelProvider.R_WriteToExcel(loDataTable);
            //    var saveFileName = $"{Guid.NewGuid().ToString()}.xlsx";

            //    await JS.downloadFileFromStreamHandler(saveFileName, loByteFile);

            var loCls = new R_ProcessAndUploadClient(
                        plSendWithContext: false,
                        plSendWithToken: false,
                        poProcessProgressStatus: this);

            //preapare Batch Parameter
            var loBatchPar = new R_BatchParameter();
            loBatchPar.COMPANY_ID = "RCD";
            loBatchPar.USER_ID = "cp";
            loBatchPar.ClassName = "BatchAndExcelBack.SaveBatchWithBulkCopyCls";
            loBatchPar.BigObject = _resultEmployeeExcel;
            var lcGuid = await loCls.R_BatchProcess<List<EmployeeDTO>>(loBatchPar, 10);
        }
        catch (Exception)
        {
            throw;
        }
    }

    #region Status
    async Task R_IProcessProgressStatus.ProcessComplete(string pcKeyGuid, eProcessResultMode poProcessResultMode)
    {
        if (poProcessResultMode == eProcessResultMode.Success)
        {
            _message = string.Format("Process Complete and success with GUID {0}", pcKeyGuid);
        }

        if (poProcessResultMode == eProcessResultMode.Fail)
        {
            _message = string.Format("Process Complete but fail with GUID {0}", pcKeyGuid);
        }

        StateHasChanged();

        await Task.CompletedTask;
    }

    async Task R_IProcessProgressStatus.ProcessError(string pcKeyGuid, R_APIException ex)
    {
        _message = string.Format("Process Error with GUID {0}", pcKeyGuid);

        StateHasChanged();

        await Task.CompletedTask;
    }

    async Task R_IProcessProgressStatus.ReportProgress(int lnProgress, string lcStatus)
    {
        _message = string.Format("Process Progress {0} with status {1}", lnProgress, lcStatus);

        //_percentage = lnProgress.ToString() + "%";
        _percentage = lnProgress;
        _message = string.Format("Process Progress {0} with status {1}", lnProgress, lcStatus);

        StateHasChanged();

        await Task.CompletedTask;
    }
    #endregion
}
