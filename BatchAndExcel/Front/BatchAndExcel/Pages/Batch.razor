@page "/batch"

<R_GroupBox Title="Batch Process">
    <R_Button OnClick="@OnClickHandler">Process</R_Button>
    <R_ProgressBar Label="@_batchViewModel.Message" MaxValue="100" Value="@_batchViewModel.Percentage" />
</R_GroupBox>

@code {
    [CascadingParameter] private DialogFactory Dialog { get; set; }

    private BatchViewModel _batchViewModel = new();
    private List<EmployeeDTO> _employeeList { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var loEx = new R_Exception();

        try
        {
            _batchViewModel.StateChangeAction = () => StateHasChanged();
            _batchViewModel.ShowErrorAction = async (R_APIException exception) =>
            {
                await ShowErrorInvoke(exception);
            };
            _batchViewModel.ShowSuccessAction = ShowSuccessInvoke;

            var employeeId = 1;
            var loFake = new Faker<EmployeeDTO>()
               .CustomInstantiator(x => new EmployeeDTO())
               .RuleFor(x => x.FirstName, x => x.Name.FirstName())
               .RuleFor(x => x.Gender, x => x.PickRandom(new[] { "M", "F" }))
               .RuleFor(x => x.Id, x => employeeId++.ToString());

            _employeeList = loFake.Generate(10);
        }
        catch (Exception ex)
        {
            loEx.Add(ex);
        }

        if (loEx.HasError)
            await Dialog.AlertAsync(loEx.ErrorList[0].ErrDescp, "Error");
    }

    #region Batch

    public async Task OnClickHandler()
    {
        var loEx = new R_Exception();

        try
        {
            //Instantiate ProcessClient
            var loCls = new R_ProcessAndUploadClient(
                plSendWithContext: false,
                plSendWithToken: false,
                poProcessProgressStatus: _batchViewModel);

            //preapare Batch Parameter
            var loBatchPar = new R_BatchParameter
            {
                COMPANY_ID = "RCD",
                USER_ID = "cp",
                ClassName = "BatchAndExcelBack.BatchAndExcelCls",
                BigObject = _employeeList,
                UserParameters = new List<R_KeyValue>
                {
                    new R_KeyValue { Key = "IsError", Value = false },
                    new R_KeyValue { Key = "ErrorEmployeeId", Value = new int[] {3, 4, 5} }
                }
            };

            await loCls.R_BatchProcess<List<EmployeeDTO>>(loBatchPar, _employeeList.Count);
        }
        catch (Exception ex)
        {
            loEx.Add(ex);
        }

        if (loEx.HasError)
            await Dialog.AlertAsync(loEx.ErrorList[0].ErrDescp, "Error");
    }

    #endregion

    #region Handler

    public async Task ShowErrorInvoke(R_APIException poException)
    {
        var loEx = R_FrontUtility.R_ConvertFromAPIException(poException);
        //this.R_DisplayException(loEx);
        // Console.WriteLine(R_FrontUtility.Dump(loEx));

        if (loEx.HasError)
            await Dialog.AlertAsync(string.Join(" | ", loEx.ErrorList.Select(x => x.ErrDescp)), "Error");
    }

    public void ShowSuccessInvoke()
    {
        //TO DO Success upload
    }

    #endregion
}
