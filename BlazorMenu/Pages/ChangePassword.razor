@using BlazorMenu.Models
@using BlazorMenu.Resources
@using R_BlazorFrontEnd.Controls.DataControls
@using R_BlazorFrontEnd.Controls.Events
@using R_CrossPlatformSecurity
@using R_SecurityPolicyCommon.DTOs

<form class="mt-1" autocomplete="off" onsubmit="@OnSubmitButtonClick">
    <div class="mb-3">
        <R_TextBox @bind-Value="@_changePasswordVM.Data.COLD_PASSWORD"
                   R_ConductorSource="@_conductorRef"
                   FieldName="@nameof(ChangePasswordModel.COLD_PASSWORD)"
                   Password
                   Class="r-form-control"
                   Placeholder="@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_P001", pcResourceName: "BlazorMenuResources"))"
                   ShowValidation />
    </div>
    <div class="mb-3">
        <R_TextBox @bind-Value="@_changePasswordVM.Data.CNEW_PASSWORD"
                   R_ConductorSource="@_conductorRef"
                   FieldName="@nameof(ChangePasswordModel.CNEW_PASSWORD)"
                   Password
                   Class="r-form-control"
                   Placeholder="@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_P002", pcResourceName: "BlazorMenuResources"))"
                   ShowValidation />
    </div>
    <div class="mb-3">
        <R_TextBox @bind-Value="@_changePasswordVM.Data.CCONFIRM_PASSWORD"
                   R_ConductorSource="@_conductorRef"
                   FieldName="@nameof(ChangePasswordModel.CCONFIRM_PASSWORD)"
                   Password
                   Class="r-form-control"
                   Placeholder="@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_P003", pcResourceName: "BlazorMenuResources"))"
                   ShowValidation />
    </div>
    <button class="btn btn-primary d-block w-100 mt-3" type="submit">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_ChangePassword", pcResourceName: "BlazorMenuResources"))</button>
</form>

<R_Conductor @ref="@_conductorRef"
             R_IsHeader
             R_ViewModel="@_changePasswordVM"
             R_ServiceGetRecord="@R_ServiceGetRecord"
             R_ServiceSave="@R_ServiceSave"
             R_Validation="@R_Validation" />

<script>
    function handleSubmit(event) {
      event.preventDefault();
    }
</script>

@code {
    [Parameter] public Func<Task>? CloseModalTask { get; set; }

    [Inject] private IClientHelper _clientHelper { get; set; } = default!;
    [Inject] private R_ISymmetricJSProvider _encryptProvider { get; set; } = default!;
    [Inject] private R_ToastService ToastService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    // [Inject] private IAccountManager AccountManager { get; set; } = default!;
    // [Inject] private IMenuManager MenuManager { get; set; } = default!;

    private R_Conductor? _conductorRef;
    private R_ChangePasswordViewModel _changePasswordVM = new R_ChangePasswordViewModel();
    private bool hasSaved = false;

    // private R_MenuModel _menuModel = new();
    private GetSecurityPolicyDTO _securityPolicy = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var loParam = new GetSecurityPolicyParameterDTO
            {
                CCOMPANY_ID = _clientHelper.CompanyId,
                CUSER_ID = _clientHelper.UserId
            };

            // var loSecurity = await MenuManager.GetSecurityPolicyAsync(loParam);

            // if (loSecurity is null || loSecurity is null)
            //     throw new Exception(string.Format(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "Common_E002", pcResourceName: "BlazorMenuResources"), "Security Policy"));

            // _securityPolicy = loSecurity;
            _securityPolicy = new();
        }
        catch (Exception ex)
        {
            ToastService.Error(ex.Message);
        }
    }

    private async Task OnSubmitButtonClick()
    {
        if (_conductorRef is not null)
            await _conductorRef.Save();

        if (CloseModalTask is not null && hasSaved)
            await CloseModalTask.Invoke();
    }

    private void R_ServiceGetRecord(R_ServiceGetRecordEventArgs eventArgs)
    {
        eventArgs.Result = _changePasswordVM.ChangePassword;
    }

    private async Task R_Validation(R_ValidationEventArgs eventArgs)
    {
        hasSaved = false;

        try
        {
            ChangePasswordModel? Data = R_FrontUtility.ConvertObjectToObject<ChangePasswordModel>(eventArgs.Data);

            if (Data is null)
                throw new Exception(string.Format(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "Common_E003", pcResourceName: "BlazorMenuResources"), "Data"));

            if (string.IsNullOrWhiteSpace(Data.COLD_PASSWORD))
            {
                _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.COLD_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V001", pcResourceName: "BlazorMenuResources"));
            }

            if (string.IsNullOrWhiteSpace(Data.CNEW_PASSWORD))
            {
                _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V002", pcResourceName: "BlazorMenuResources"));
            }

            if (string.IsNullOrWhiteSpace(Data.CCONFIRM_PASSWORD))
            {
                _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CCONFIRM_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V003", pcResourceName: "BlazorMenuResources"));
            }

            if (Data.CNEW_PASSWORD != Data.CCONFIRM_PASSWORD)
            {
                _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CCONFIRM_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V004", pcResourceName: "BlazorMenuResources"));
            }

            if (_changePasswordVM.HasValidationMessage())
            {
                eventArgs.Cancel = true;
                return;
            }

            if (_securityPolicy.LMINIMUM_PASSWORD_LENGTH &&
               _securityPolicy.IMINIMUM_PASSWORD_LENGTH > Data.CNEW_PASSWORD.Length)
            {
                _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V005", pcResourceName: "BlazorMenuResources"));
            }

            if (_securityPolicy.LMINIMUM_PASSWORD_AGE &&
                !string.IsNullOrWhiteSpace(_securityPolicy.CLAST_UPDATE_PASSWORD) &&
                _securityPolicy.IMINIMUM_PASSWORD_AGE > DateDiff(DateInterval.Day, ToDateTime(_securityPolicy.CCURRENT_DATE, "yyyy-MM-dd HH:mm:ss"), ToDateTime(_securityPolicy.CLAST_UPDATE_PASSWORD)))
            {
                _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V006", pcResourceName: "BlazorMenuResources"));
            }

            if (_securityPolicy.LENFORCE_PASSWORD_HISTORY)
            {
                var lcEncryptedPassword = await _encryptProvider.TextEncrypt(Data.CNEW_PASSWORD, _clientHelper.UserId);

                // var llResult = await AccountManager.CheckPasswordHistoryAsync(new CheckPasswordHistoryParameterDTO
                // {
                //     CCOMPANY_ID = _clientHelper.CompanyId,
                //     CUSER_ID = _clientHelper.UserId,
                //     CHASH_PASSWORD = lcEncryptedPassword
                // });

                // var llPasswordExist = llResult;
                var llPasswordExist = false;
                if (llPasswordExist)
                    _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V007", pcResourceName: "BlazorMenuResources"));
            }

            if (_securityPolicy.LCOMPLEXITY)
            {
                if (_securityPolicy.LINCLUDE_LETTER && Data.CNEW_PASSWORD.Any(x => !char.IsLetter(x)))
                {
                    _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V008", pcResourceName: "BlazorMenuResources"));
                }

                if (_securityPolicy.LINCLUDE_UPPERCASE && Data.CNEW_PASSWORD.Any(x => !char.IsUpper(x)))
                {
                    _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V009", pcResourceName: "BlazorMenuResources"));
                }

                if (_securityPolicy.LINCLUDE_LOWERCASE && Data.CNEW_PASSWORD.Any(x => !char.IsLower(x)))
                {
                    _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V010", pcResourceName: "BlazorMenuResources"));
                }

                if (_securityPolicy.LINCLUDE_NUMBER && Data.CNEW_PASSWORD.Any(x => !char.IsNumber(x)))
                {
                    _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V011", pcResourceName: "BlazorMenuResources"));
                }

                if (_securityPolicy.LINCLUDE_SPECIAL_CHARACTER && Data.CNEW_PASSWORD.Any(x => char.IsLetterOrDigit(x)))
                {
                    _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V012", pcResourceName: "BlazorMenuResources"));
                }

                if (_securityPolicy.LCANNOT_CONTAIN_USER_ID && Data.CNEW_PASSWORD.Contains(_clientHelper.UserId))
                {
                    _changePasswordVM.R_SetValidationMessage(nameof(ChangePasswordModel.CNEW_PASSWORD), R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_V013", pcResourceName: "BlazorMenuResources"));
                }
            }

            if (_changePasswordVM.HasValidationMessage())
            {
                eventArgs.Cancel = true;
                return;
            }
        }
        catch (Exception ex)
        {
            ToastService.Error(ex.Message);
        }
    }

    private async Task R_ServiceSave(R_ServiceSaveEventArgs eventArgs)
    {
        R_Exception loEx = new R_Exception();

        try
        {
            ChangePasswordModel? Data = R_FrontUtility.ConvertObjectToObject<ChangePasswordModel>(eventArgs.Data);

            if (Data is null)
                throw new Exception(string.Format(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "Common_E003", pcResourceName: "BlazorMenuResources"), "Data"));

            var loParam = new UpdatePasswordParameterDTO
            {
                CCOMPANY_ID = _clientHelper.CompanyId,
                CUSER_ID = _clientHelper.UserId,
                CHASH_PASSWORD = await _encryptProvider.TextEncrypt(Data.CNEW_PASSWORD, _clientHelper.UserId.ToLower()),
                COLD_USER_HASH_PASSWORD = await _encryptProvider.TextEncrypt(Data.COLD_PASSWORD, _clientHelper.UserId.ToLower())
            };

            // await AccountManager.UpdatePasswordAsync(loParam);

            ToastService.Success(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "ChangePassword_M001", pcResourceName: "BlazorMenuResources"));

            eventArgs.Result = new ChangePasswordModel();
            hasSaved = true;
        }
        catch (Exception ex)
        {
            loEx.Add(ex);
            foreach (var error in loEx.GetErrorList())
            {
                ToastService.Error(error.ErrDescp);
            }
            hasSaved = false;
        }
    }

    private static int DateDiff(DateInterval peInterval, DateTime pdDateFrom, DateTime pdDateTo)
    {
        switch (peInterval)
        {
            case DateInterval.Minute:
                return Math.Abs((pdDateFrom - pdDateTo).Minutes);
            default:
                return Math.Abs((pdDateFrom - pdDateTo).Days);
        }
    }

    private static DateTime ToDateTime(string pcDateString)
    {
        return ToDateTime(pcDateString, "yyyyMMdd");
    }

    private static DateTime ToDateTime(string pcDateString, string pcFormat)
    {
        return DateTime.ParseExact(pcDateString, pcFormat, System.Globalization.CultureInfo.InvariantCulture);
    }

    private enum DateInterval
    {
        Minute,
        Day
    }
}
