@using BlazorMenu.Helper
@using BlazorMenu.Resources
@using BlazorMenu.Shared.Overlay
@using R_BlazorFrontEnd.Controls.Constants
@inherits ComponentBase

<main class="main" id="top">
    <div class="container-fluid px-0" data-layout="container">
        <nav class="consistent navbar navbar-light navbar-glass navbar-vertical navbar-expand-xl ps-3" style="display: none;">
            <div class="d-flex align-items-center" >
                <div class="toggle-icon-wrapper">
                    <button class="btn navbar-toggler-humburger-icon navbar-vertical-toggle" data-bs-toggle="tooltip" data-bs-placement="left" title="Toggle Navigation">
                        <span class="navbar-toggle-icon">
                            <span class="toggle-line"></span>
                        </span>
                    </button>
                </div>
                <a class="navbar-brand" href="/">
                    <div class="d-flex align-items-center py-2">
                        <div style=@_logoStyle></div>
                    </div>
                </a>
            </div>

            <div class="collapse navbar-collapse" id="navbarVerticalCollapse" style="display:flex; position: relative">
                <div class="navbar-vertical-content">
                    <div class="navbar-content">
                        <ul class="navbar-nav flex-column mb-3" id="navbarVerticalNav">
                        @if (_favData != null)
                        {
                            <li class="nav-item">
                                <a class="nav-link cur-pointer" role="button" onclick="@(async () => await OnClickShowMenuOverlay(_favData, new string[] { _favData.Text }))">
                                    <div class="d-flex align-items-center">
                                        <div class="nav-link-icon rounded-circle d-flex justify-content-center align-items-center">
                                            <svg class="r-nav-custom-icon">
                                                <use href="assets/icons/icons.svg#fav" />
                                            </svg>
                                        </div>
                                        <span class="nav-link-text ps-1">@_favData.Text</span>
                                    </div>
                                </a>
                            </li>
                        }
                        @foreach (var item in _data)
                        {
                            var itemId = IdGeneratorHelper.Generate(item.Id, 3);
                            <li class="nav-item">
                                <a class="nav-link dropdown-indicator" href="@($"#{itemId}")" role="button"
                                   data-bs-toggle="collapse" aria-expanded="false" aria-controls="@itemId">
                                    <div class="d-flex align-items-center">
                                        <div class="nav-link-icon rounded-circle d-flex justify-content-center align-items-center">
                                            <div>
                                                    @string.Concat(
                                                    (item.Text ?? "")
                                                    .Split(" ", StringSplitOptions.RemoveEmptyEntries)
                                                    .Select(word => word.FirstOrDefault(char.IsLetter))
                                                    .Where(c => char.IsLetter(c))
                                                    .Take(2))
                                            </div>
                                        </div>
                                        <span class="nav-link-text ps-1">@item.Text</span>
                                    </div>
                                </a>

                                <ul class="nav collapse" id="@itemId">
                                    @{
                                        foreach (var item1 in item.Children)
                                        {
                                            var itemId1 = IdGeneratorHelper.Generate(item1.Id, 3);
                                            <li class="nav-item">
                                                <a class="nav-link cur-pointer" onclick="@(async () => await OnClickShowMenuOverlay(item1, new string[] { item.Text ?? string.Empty, item1.Text }))">
                                                    <div class="d-flex align-items-center">
                                                        <span class="nav-link-icon">
                                                            <svg class="r-nav-custom-icon">
                                                                <use href="@(BlazorMenuUtility.GetMenuSVGHref(new() { Id = item1.Text }))" />
                                                            </svg>
                                                        </span>
                                                        <span class="nav-link-text ps-1">@item1.Text</span>
                                                    </div>
                                                </a>

                                                @*<ul class="nav collapse" id="@itemId1">
                                                    @{
                                                        foreach (var item2 in item1.Children)
                                                        {
                                                            <li class="nav-item" 
                                                            title="@item2.Title" 
                                                            @onclick="@(() => OnClickProgram(item2))">
                                                                    <a class="nav-link cur-pointer" data-bs-toggle="" aria-expanded="false">
                                                                    <div class="d-flex align-items-center">
                                                                        <span class="nav-link-icon">
                                                                            <svg class="r-nav-custom-icon">
                                                                                <use href="@($"{LibraryConstants.IconFilePath}#{((string.IsNullOrWhiteSpace(item2.ProgramButton) || item2.ProgramButton == "0") ? "default" : item2.ProgramButton)}")" />
                                                                            </svg>
                                                                        </span>
                                                                        <span class="nav-link-text ps-1">@item2.Text</span>
                                                                    </div>
                                                                </a>
                                                            </li>
                                                        }
                                                    }
                                                </ul>*@
                                            </li>
                                        }
                                    }
                                </ul>
                            </li>
                        }

                        </ul>
                    </div>
                    <div id="@_footerId">
                        <div class="fs--1 mt-2">
                            <p class="fs--1 mb-0 text-600">
                                <span class="fw-bold">@_clientHelper.CompanyId</span>
                                <a class="cur-pointer" @onclick="ShowInfoPage">
                                    <i class="fas fa-info-circle"></i>
                                </a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <nav class="navbar navbar-light navbar-glass navbar-top navbar-expand-xl" style="display: none;">
            <button class="btn navbar-toggler-humburger-icon navbar-toggler me-1 me-sm-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarStandard" aria-controls="navbarStandard" aria-expanded="false" aria-label="Toggle Navigation">
                <span class="navbar-toggle-icon">
                    <span class="toggle-line"></span>
                </span>
            </button>

            <a class="navbar-brand me-1 me-sm-3" href="/">
                <div class="d-flex align-items-center">
                    <img class="me-2" src="@_logoUrl" alt="" width="40" />
                </div>
            </a>
        </nav>

        <div class="content pb-0 d-flex flex-column vh-100">
            <nav class="navbar navbar-light navbar-glass navbar-top navbar-expand mw-100 pe-0" style="display: none;">
                <!-- muncul ketika navbar nya di atas karena screen kecil -->
                <button class="btn navbar-toggler-humburger-icon navbar-toggler me-1 me-sm-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarVerticalCollapse" aria-controls="navbarVerticalCollapse" aria-expanded="false" aria-label="Toggle Navigation">
                    <span class="navbar-toggle-icon">
                        <span class="toggle-line"></span>
                    </span>
                </button>
                <a class="navbar-brand me-1 me-sm-3" href="/">
                    <div class="d-flex align-items-center">
                        <img class="me-2" src="@_logoUrl" alt="" width="80" height="25" />
                    </div>
                </a>

                <ul class="navbar-nav align-items-center">
                    <li class="nav-item">
                        <!-- search box -->
                        <TelerikAutoComplete @ref="@TelerikAutoCompleteRef"
                                             Data="@SearchBoxData"
                                             Value="@_searchText"
                                             ValueChanged="@SearchTextValueChanged"
                                             Placeholder="@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_Search", pcResourceName: "BlazorMenuResources") + "...")"
                                             OnChange="@SearchTextOnChange"
                                             ShowClearButton
                                             ValueField="@(nameof(SearchBoxItem.Text))"
                                             Filterable
                                             FilterOperator="StringFilterOperator.Contains"
                                             Class="search-input r-form-control"
                                             Id="@_autoCompleteId">
                            <AutoCompleteSettings>
                                <AutoCompletePopupSettings Height="auto" MaxHeight="200px" />
                            </AutoCompleteSettings>
                        </TelerikAutoComplete>
                    </li>
                </ul>

                <ul class="navbar-nav navbar-nav-icons ms-auto flex-row align-items-center gap-2 position-relative">
                    <!-- theme switcher -->
                    <li class="nav-item">
                        <div class="theme-control-toggle fa-icon-wait">
                            <input class="form-check-input ms-0 theme-control-toggle-input" id="themeControlToggle" type="checkbox" data-theme-control="theme" value="dark" />
                            <label class="mb-0 theme-control-toggle-label theme-control-toggle-light" for="themeControlToggle" data-bs-toggle="tooltip" data-bs-placement="left" title="Switch to light theme">
                                <span class="fas fa-sun fs-0"></span>
                            </label>
                            <label class="mb-0 theme-control-toggle-label theme-control-toggle-dark" for="themeControlToggle" data-bs-toggle="tooltip" data-bs-placement="left" title="Switch to dark theme">
                                <span class="fas fa-moon fs-0"></span>
                            </label>
                        </div>
                    </li>

                    <!-- notification -->
                    <li class="nav-item dropdown position-relative z-index-1" title="Notification">
                        <a class="nav-link @NotificationCssClass px-0 fa-icon-wait position-relative" id="navbarDropdownNotification" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-hide-on-body-scroll="data-hide-on-body-scroll">
                            <span data-fa-transform="shrink-6">
                                <svg style="height: 26px; width: 26px;">
                                    <use href=@($"{LibraryConstants.IconFilePath}#notification") />
                                </svg>
                            </span>
                            @if (_newNotificationMessages.Count > 0)
                            {
                                <div id="r-notification-badge" class="@(_newNotificationMessages.Count < 10 ? "r-rounded" : "")">
                                    @(_newNotificationMessages.Count > 99 ? "99+" : _newNotificationMessages.Count.ToString())
                                    <span class="visually-hidden">unread messages</span>
                                </div>
                            }
                        </a>

                        <div class="dropdown-menu dropdown-caret dropdown-caret dropdown-menu-end dropdown-menu-card dropdown-menu-notification dropdown-caret-bg" aria-labelledby="navbarDropdownNotification">
                            <div class="card-notification shadow-none">
                                <!-- card header -->
                                <div class="card-header border-bottom">
                                    <div class="row justify-content-between align-items-center">
                                        <div class="col-auto">
                                            <h6 class="card-header-title mb-0 font-weight-bold">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_Notifications", pcResourceName: "BlazorMenuResources"))</h6>
                                        </div>
                                        <div class="col-auto ps-0 ps-sm-3">
                                            @* <a class="card-link fw-normal" href="#">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_MarkAllAsRead", pcResourceName: "BlazorMenuResources"))</a> *@
                                        </div>
                                    </div>
                                </div>

                                <div class="scrollbar" style="max-height: 35rem">
                                    <div class="list-group list-group-flush fw-normal fs--1">
                                        <!-- no data-->
                                        @if (_newNotificationMessages.Count < 1 && _oldNotificationMessages.Count < 1)
                                        {
                                            <div class="list-group-item position-relative">
                                                <a class="notification notification-flush">
                                                    <div class="py-2">
                                                        <p class="text-center mb-0">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_NoNotification", pcResourceName: "BlazorMenuResources"))</p>
                                                    </div>
                                                </a>
                                            </div>
                                        }
                                        <!-- new notification -->
                                        @if (_newNotificationMessages.Count > 0)
                                        {
                                            <div class="list-group-title border-bottom">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_Unread", pcResourceName: "BlazorMenuResources").ToUpper())</div>
                                            <!-- new notification item -->
                                            @foreach (var newMessage in _newNotificationMessages.OrderByDescending(x => x.MessageDate))
                                            {
                                                TimeSpan diff = DateTime.Now - newMessage.MessageDate;
                                                bool isToday = newMessage.MessageDate.Date == DateTime.Now.Date;
                                                string timeDisplay = "";

                                                if (diff.TotalMinutes < 1 && isToday)
                                                {
                                                    timeDisplay = R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_JustNow", pcResourceName: "BlazorMenuResources");
                                                }
                                                else if (diff.TotalMinutes < 60 && isToday)
                                                {
                                                    timeDisplay = string.Format(
                                                    R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_MinutesAgo", pcResourceName: "BlazorMenuResources"),
                                                    (int)diff.TotalMinutes);
                                                }
                                                else if (diff.TotalHours < 24 && isToday)
                                                {
                                                    timeDisplay = string.Format(
                                                    R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_HoursAgo", pcResourceName: "BlazorMenuResources"),
                                                    (int)diff.TotalHours);
                                                }
                                                else
                                                {
                                                    timeDisplay = $"{newMessage.MessageDate.ToString()}";
                                                }

                                                <div class="list-group-item position-relative">
                                                    <a class="notification notification-flush notification-unread">
                                                        <div class="notification-body">
                                                            <p class="mb-1">@((MarkupString)newMessage.HtmlMessage)</p>
                                                            <span class="notification-time">@(timeDisplay)</span>
                                                        </div>
                                                    </a>

                                                    @if (newMessage.IsJustArrived)
                                                    {
                                                        <div class="position-absolute top-0 start-0 w-100 h-100 flash-new z-index-1"></div>
                                                    }
                                                </div>
                                            }
                                        }
                                        
                                        <!-- old notification -->
                                        @if (_oldNotificationMessages.Count > 0)
                                        {
                                            <div class="list-group-title border-bottom">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_Read", pcResourceName: "BlazorMenuResources").ToUpper())</div>
                                            <!-- old notification item -->
                                            @foreach (var oldMessage in _oldNotificationMessages.OrderByDescending(x => x.MessageDate).Take(_maxNotificationCount))
                                            {
                                                TimeSpan diff = DateTime.Now - oldMessage.MessageDate;
                                                bool isToday = oldMessage.MessageDate.Date == DateTime.Now.Date;
                                                string timeDisplay = "";

                                                if (diff.TotalMinutes < 1 && isToday)
                                                {
                                                    timeDisplay = R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_JustNow", pcResourceName: "BlazorMenuResources");
                                                }
                                                else if (diff.TotalMinutes < 60 && isToday)
                                                {
                                                    timeDisplay = string.Format(
                                                    R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_MinutesAgo", pcResourceName: "BlazorMenuResources"),
                                                    (int)diff.TotalMinutes);
                                                }
                                                else if (diff.TotalHours < 24 && isToday)
                                                {
                                                    timeDisplay = string.Format(
                                                    R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_HoursAgo", pcResourceName: "BlazorMenuResources"),
                                                    (int)diff.TotalHours);
                                                }
                                                else
                                                {
                                                    timeDisplay = $"{oldMessage.MessageDate.ToString()}";
                                                }

                                                <div class="list-group-item">
                                                    <a class="notification notification-flush">
                                                        <div class="notification-body">
                                                            <p class="mb-1">@((MarkupString)oldMessage.HtmlMessage)</p>
                                                            <span class="notification-time">@(timeDisplay)</span>
                                                        </div>
                                                    </a>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>

                                @* <div class="card-footer text-center border-top"><a class="card-link d-block" onclick="@OnClickViewAll" role="button">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_ViewAll", pcResourceName: "BlazorMenuResources"))</a></div> *@
                            </div>
                        </div>
                    </li>

                    <!-- user menu -->
                    <li class="nav-item dropdown" title="User Profile">
                        <a class="nav-link px-0" style="line-height:0px;" id="navbarDropdownUser" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @if (_userIcon != null)
                            {
                                <div class="avatar avatar-xl">
                                    <div class="h-100 w-100 rounded-circle overflow-hidden">
                                        <img class="rounded-circle" src="@_userIcon" alt="" data-dz-thumbnail="data-dz-thumbnail" />
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="avatar avatar-xl">
                                    <div class="avatar-name rounded-circle">
                                        <span>@_userId</span>
                                    </div>
                                </div>
                            }
                        </a>

                        <div class="dropdown-menu dropdown-caret dropdown-caret dropdown-menu-end py-0" aria-labelledby="navbarDropdownUser">
                            <div class="bg-white dark__bg-1000 rounded-2 py-0">
                                <a class="dropdown-item cur-pointer py-2" @onclick="@ShowProfilePage">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_ProfileAccount", pcResourceName: "BlazorMenuResources"))</a>
                                <div class="dropdown-divider m-0"></div>
                                <a class="dropdown-item cur-pointer py-2" @onclick="@Logout">@(R_FrontUtility.R_GetMessage(typeof(BlazorMenuLocalizer), "_Logout", pcResourceName: "BlazorMenuResources"))</a>
                            </div>
                        </div>
                    </li>
                </ul>
            </nav>

            <script suppress-error="BL9992">
                var navbarPosition = localStorage.getItem('navbarPosition');
                var navbarVertical = document.querySelector('.navbar-vertical');
                var navbarTopVertical = document.querySelector('.content .navbar-top');
                var navbarTop = document.querySelector('[data-layout] .navbar-top');
                var navbarTopCombo = document.querySelector('.content [data-navbar-top="combo"]');
                if (navbarPosition === 'top') {
                    navbarTop.removeAttribute('style');
                    navbarTopVertical.remove(navbarTopVertical);
                    navbarVertical.remove(navbarVertical);
                    navbarTopCombo.remove(navbarTopCombo);
                } else if (navbarPosition === 'combo') {
                    navbarVertical.removeAttribute('style');
                    navbarTopCombo.removeAttribute('style');
                    navbarTop.remove(navbarTop);
                    navbarTopVertical.remove(navbarTopVertical);
                }
                else {
                    if (navbarVertical != null) {
                        navbarVertical.removeAttribute('style');
                    }

                    if (navbarTopVertical != null) {
                        navbarTopVertical.removeAttribute('style');
                    }

                    if (navbarTop != null) {
                        navbarTop.remove(navbarTop);
                    }

                    if (navbarTopCombo != null) {
                        navbarTopCombo.remove(navbarTopCombo);
                    }
                }
            </script>

            <div class="flex-grow-1 position-relative d-flex flex-column overflow-hidden" style="min-height: 0;">
                <div class="flex-grow-1 overflow-auto pe-3 scroll-hidden" style="min-height: 0; padding-bottom: 1rem; z-index: 0">
                    <div class="card" style="max-height: 100%; min-height: fit-content;">
                        <R_ErrorHandler>
                            <MenuTabSet @ref="@_menuTabSetRef" />
                        </R_ErrorHandler>
                    </div>
                </div>
                <R_ErrorBoundary>
                    <MenuOverlay @ref="@_menuOverlay"
                                 OnClickProgram="OnClickProgram"
                                 OnFavorite="SetFavoriteAsync"
                                 OnUnfavorite="SetUnfavoriteAsync"
                                 OnUpdateSequence="SetUserProgramSequenceAsync" />
                </R_ErrorBoundary>
            </div>

            <!--FOOTER-->
            
        </div>
    </div>
</main>