@using BlazorMenu.Extensions
@inherits ComponentBase
@implements R_IMenuTabSet

@if (Tabs.Count == 0)
{
    <style>
        .card {
        box-shadow:none;
        background:transparent;
        }
    </style>
    <div class="d-flex align-items-center justify-content-between mt-3 mx-5">
        <div class="ms-3">
            <h1 class="fw-bold lh-base">We Provide Better Solution<br />For Your Business</h1>
            <p>We are team of talented programmer to make an easy way to manage your business</p>
        </div>
        <div class="me-5">
            <img src="assets/img/bg-home.png" width="400" />
        </div>
    </div>
    <div class="row text-center">
        <div class="col">
            <img src="assets/img/box.png" width="50">
            <h3 class="mt-3">Simple Application</h3>
            <p>Our application takes less time<br />than making cup of coffee.</p>
        </div>
        <div class="col">
            <img src="assets/img/program.png" width="50">
            <h3 class="mt-3">Program For Everyone</h3>
            <p>We offer financing for nearly all<br />credit ranges and price points.</p>
        </div>
        <div class="col">
            <img src="assets/img/bag.png" width="50">
            <h3 class="mt-3">Flexible Payment</h3>
            <p>Payment schedules that are build<br />to fit your needs</p>
        </div>
    </div>
}
else
{
    <CascadingValue Value="this" Name="MenuTabSet">
        <XTabsWrapper @ref="@_xtabsWrapper" />
    </CascadingValue>
}

@code {
    [CascadingParameter(Name = "RouteView")] public MenuTabsRouteView? RouteView { get; set; } = default!;

    [Inject] internal MenuTabSetTool? _tabSetTool { get; set; } = default!;
    [Inject] internal NavigationManager? NavigationManager { get; set; } = default!;
    [Inject] private IServiceProvider ServiceProvider { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private R_PreloadService _preloadService { get; set; } = default!;

    public List<MenuTab> Tabs => _tabSetTool?.Tabs ?? new List<MenuTab>();

    private XTabsWrapper? _xtabsWrapper;
    internal R_ITenant? _tenant;

    protected override void OnInitialized()
    {
        // _tenant = ServiceProvider.GetTenantFromService();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Tabs.Count == 0)
            return;

        var loItem = Tabs.FirstOrDefault(x => x.IsActive);
        if (loItem is not null && _xtabsWrapper is not null)
        {
            await _xtabsWrapper.CreateNewTab(loItem);
        }
    }

    public async Task OpenTabAsync(string title, string url, string access = "")
    {
        MenuTab? selTab = Tabs.FirstOrDefault(m => m.Url == url && (m.Title == title || string.IsNullOrEmpty(m.Title)));

        if (selTab is null)
        {
            await _preloadService.Show();
            if (_tabSetTool is not null)
                await _tabSetTool.AddTab(title, url, access); // Create new XTab if it doesn't exist yet
            return;
        }

        if (_xtabsWrapper is null)
            return;

        await _xtabsWrapper.OpenTabAsync(selTab);
    }

    public async Task CloseTabFromProgram(R_IMenuTab poTab)
    {
        if (_xtabsWrapper is not null)
        {
            await _xtabsWrapper.CloseTabFromProgram(poTab);
        }
    }
}