@inherits R_Page
@inject IJSRuntime JS
@inject R_BlazorFrontEnd.R_IFileConverter FileConverter
@namespace SAB03100Front.TextEditor

<R_GroupBox Title="R_TextEditor">
    <R_TextEditor @ref="@_textEditorRef"
                  @bind-Value="@_editorValue"
                  Height="200px"
                  Width="100px"
                  R_TextEditorToolMode="@R_eTextEditorToolMode.None" />

    <R_TextEditor @ref="@_textEditorRef2"
                  @bind-Value="@_editorValue"
                  Height="200px"
                  Width="100px"
                  R_TextEditorToolMode="@R_eTextEditorToolMode.Basic" />


    <R_ItemLayout col="2">
        <R_Button OnClick="@OnClickSave" EnableLoaderContainer>Save Document</R_Button>
        <R_Button OnClick="OnClickSaveAsPDF" EnableLoaderContainer>Download as PDF</R_Button>
    </R_ItemLayout>

    <R_ItemLayout col="2">
        <R_InputFile OnChange="@OnChangeHandler"
        Accepts="@accepts"
        Enabled="@_inputFileEnabled" />
    </R_ItemLayout>

    <R_Button OnClick="@OnClickA" EnableLoaderContainer>Change A</R_Button>
    <R_Button OnClick="@OnClickB" EnableLoaderContainer>Change B</R_Button>
    <R_Button OnClick="@OnClickC" EnableLoaderContainer>Change C</R_Button>
</R_GroupBox>

@code {
    private string _editorValue { get; set; }
    private R_TextEditor _textEditorRef { get; set; }
    private R_TextEditor _textEditorRef2 { get; set; }
    private R_eFileSelectAccept[] accepts = { R_eFileSelectAccept.Doc };
    private bool _inputFileEnabled { get; set; } = false;

    protected override Task R_Init_From_Master(object poParameter)
    {
        _editorValue = @"<BODY style=""BACKGROUND-COLOR: white""><P>Dear ,</P>
<P>&nbsp;</P>
<P>Dengan ini saya sampaikan bahwa</P>
<P>&nbsp;</P>
<P>Terima kasih atas perhatiannya.</P>
<P>Salam,</P>
<P>&nbsp;</P>
<P>Nama</P>
<P>PT IPM</P></BODY>";

        return Task.CompletedTask;
    }

    private byte[] _rawFileByte = null;

    private async Task OnClickSave()
    {
        var saveFileName = $"{Guid.NewGuid().ToString()}.docx";

        //_rawFileByte = FileConverter.R_GetByteFromString(_editorValue); //kalo mau langsung save ke database
        var loByteFile = FileConverter.R_GetByteFromHtmlString(_editorValue, R_eDocumentType.Docx); //kalo mau save langsung jadi file

        await JS.downloadFileFromStreamHandler(saveFileName, loByteFile);
    }

    private async Task OnChangeHandler(InputFileChangeEventArgs eventArgs)
    {
        var loEx = new R_Exception();

        try
        {
            var loByteFile = await R_FrontUtility.ConvertStreamToByteAsync(eventArgs.File.OpenReadStream());

            //_editorValue = FileConverter.R_GetStringFromByte(_rawFileByte);
            _editorValue = FileConverter.R_GetHtmlStringFromByte(loByteFile, R_eDocumentType.Docx);
        }
        catch (Exception ex)
        {
            Console.WriteLine(R_FrontUtility.Dump(ex));
        }
    }

    private async Task OnClickSaveAsPDF()
    {
        var saveFileName = $"{Guid.NewGuid().ToString()}.pdf";

        var loByteFile = FileConverter.R_GetByteFromHtmlString(_editorValue, R_eDocumentType.Pdf);

        await JS.downloadFileFromStreamHandler(saveFileName, loByteFile);
    }

    private void OnClickA()
    {
        _editorValue = "testing A";
    }

    private void OnClickB()
    {
        _editorValue = "testing B";
    }

    private void OnClickC()
    {
        _editorValue = "testing C";
    }
}