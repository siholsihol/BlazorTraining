@inherits R_Page
@inject IJSRuntime JS

<R_GroupBox Title="R_ImageBox">
    <R_ImageBox @ref="@_imageBoxRef"
                @bind-Value="@_imageSourceByte"
                MaxWidth="200px"
                MaxHeight="200px" 
                ImageBoxType="R_eImageBoxType.Zoom" />

    <R_ItemLayout col="5">
        <R_InputFile OnChange="@OnChangeHandler" Accepts="@_accepts"></R_InputFile>
    </R_ItemLayout>
    <R_ItemLayout col="2">
        <R_OpenFileDialogButton @ref="@_inputFile" OnChange="@OnChangeHandler" Accepts="@_accepts">Browse</R_OpenFileDialogButton>
    </R_ItemLayout>
    <R_ItemLayout col="3">
        <R_Button OnClick="@ButtonClearOnClick">Clear Image</R_Button>
    </R_ItemLayout>
</R_GroupBox>

@code {
    private R_ImageBox _imageBoxRef;
    private byte[] _imageSourceByte = default;
    private R_eFileSelectAccept[] _accepts = { R_eFileSelectAccept.Image };
    private R_OpenFileDialogButton _inputFile;

    protected override async Task R_Init_From_Master(object poParameter)
    {
        await _inputFile.FocusAsync();
    }

    private async Task OnChangeHandler(InputFileChangeEventArgs eventArgs)
    {
        var loEx = new R_Exception();

        try
        {
            var loByteFile = await R_FrontUtility.ConvertStreamToByteAsync(eventArgs.File.OpenReadStream());
            var lcImage64 = Convert.ToBase64String(loByteFile);

            _imageSourceByte = loByteFile;
        }
        catch (Exception ex)
        {
            Console.WriteLine(R_FrontUtility.Dump(ex));
        }
    }

    private void ButtonClearOnClick()
    {
        //_imageSourceByte = null;
        _imageBoxRef?.R_ClearImage();
    }
}
